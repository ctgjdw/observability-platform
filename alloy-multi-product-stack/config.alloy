// Logs ingestion to Loki
logging {
  level = "info"
  format   = "json"
  write_to = [loki.write.default.receiver]
}

loki.write "default" {
    endpoint {
        url = "http://loki:3100/loki/api/v1/push"
		headers = {
		"X-Scope-OrgID" = "common_services",
		}
    }
}

// Traces collection to Tempo

otelcol.auth.headers "default" {
	header {
		key = "X-Scope-OrgID"
		value = env("OTEL_SERVICE_NAMESPACE")
	}
}

otelcol.receiver.otlp "default" {
	http {
		endpoint         = "0.0.0.0:4318"
		include_metadata = true
	}

	output {
		metrics = [otelcol.processor.batch.default.input]
		logs    = []
		traces  = [otelcol.processor.batch.default.input, otelcol.connector.spanmetrics.default.input]
	}
}

otelcol.processor.batch "default" {
	output {
		metrics = [otelcol.exporter.prometheus.prom.input]
		logs    = []
		traces  = [otelcol.exporter.otlphttp.default.input]
	}
}

otelcol.exporter.otlphttp "default" {
	client {
		endpoint           = "http://tempo:4318"
		http2_ping_timeout = "0s"
		auth               = otelcol.auth.headers.default.handler
	}
}

// Metrics

prometheus.exporter.self "default" {
}

prometheus.scrape "alloy" {
  targets    = prometheus.exporter.self.default.targets
  forward_to = [prometheus.remote_write.prom.receiver]
}

otelcol.connector.spanmetrics "default" {
	dimension {
		name = "http.method"
	}

	dimension {
		name = "http.status_code"
	}

	dimension {
		name = "http.route"
	}

	dimension {
		name = "service.namespace"
	}

	histogram {
		explicit { }
	}

	events {
		dimension {
			name = "http.method"
		}

		dimension {
			name = "http.status_code"
		}

		dimension {
			name = "http.route"
		}

		dimension {
			name = "service.namespace"
		}
	}

	output {
		metrics = [otelcol.exporter.prometheus.prom.input]
	}
}

otelcol.exporter.prometheus "prom" {
  forward_to = [prometheus.remote_write.prom.receiver]
}

prometheus.remote_write "prom" {
  endpoint {
    url = "http://mimir:9009/api/v1/push"
	headers = {
		"X-Scope-OrgID" = env("OTEL_SERVICE_NAMESPACE"),
	}
  }
}

// Frontend

faro.receiver "integrations_app_agent_receiver" {
    server {
        listen_address           = "0.0.0.0"
        listen_port              = 12346
        cors_allowed_origins     = ["http://localhost:3001"]
        max_allowed_payload_size = "10MiB"

        rate_limiting {
            rate = 100
        }
    }

    sourcemaps { }

    output {
        logs   = [loki.process.logs_process_client.receiver]
        traces = [otelcol.exporter.otlphttp.default.input]
    }
}

loki.process "logs_process_client" {
    forward_to = [loki.write.namespaced.receiver]

    stage.logfmt {
        mapping = { "kind" = "", "app_name" = "", "app_environment" = "" }
    }

    stage.labels {
        values = { "kind" = "kind", "service_name" = "app_name", "Application" = "app_name", "Environment" = "app_environment" }
    }

	stage.static_labels {
		values = {
			Namespace = env("OTEL_SERVICE_NAMESPACE"),
		}
	}
}

loki.write "namespaced" {
    endpoint {
        url = "http://loki:3100/loki/api/v1/push"
		headers = {
		"X-Scope-OrgID" = env("OTEL_SERVICE_NAMESPACE"),
		}
    }
}
