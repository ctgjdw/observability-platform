// Logs ingestion to Loki
logging {
  level = "info"
  format   = "json"
  write_to = [loki.write.default.receiver]
}

loki.write "default" {
    endpoint {
        url = "http://loki:3100/loki/api/v1/push"
		headers = {
		"X-Scope-OrgID" = "common_services",
		}
    }
}

// Traces collection to Tempo

otelcol.auth.headers "default" {
	header {
		key = "X-Scope-OrgID"
		value = env("OTEL_SERVICE_NAMESPACE")
	}
}

otelcol.receiver.otlp "default" {
	http {
		endpoint         = "0.0.0.0:4318"
		include_metadata = true
	}

	output {
		metrics = [otelcol.processor.batch.default.input]
		logs    = []
		traces  = [otelcol.processor.batch.default.input, otelcol.connector.spanmetrics.default.input]
	}
}

otelcol.processor.batch "default" {
	output {
		metrics = [otelcol.exporter.prometheus.prom.input]
		logs    = []
		traces  = [otelcol.exporter.otlphttp.default.input]
	}
}

otelcol.exporter.otlphttp "default" {
	client {
		endpoint           = "http://tempo:4318"
		http2_ping_timeout = "0s"
		auth               = otelcol.auth.headers.default.handler
	}
}

// Metrics

prometheus.exporter.self "default" {
}

prometheus.scrape "alloy" {
  targets    = prometheus.exporter.self.default.targets
  forward_to = [prometheus.remote_write.prom.receiver]
}

otelcol.connector.spanmetrics "default" {
	dimension {
		name = "http.method"
	}

	dimension {
		name = "http.status_code"
	}

	dimension {
		name = "http.route"
	}

	dimension {
		name = "service.namespace"
	}

	histogram {
		explicit { }
	}

	events {
		dimension {
			name = "http.method"
		}

		dimension {
			name = "http.status_code"
		}

		dimension {
			name = "http.route"
		}

		dimension {
			name = "service.namespace"
		}
	}

	output {
		metrics = [otelcol.exporter.prometheus.prom.input]
	}
}

otelcol.exporter.prometheus "prom" {
  forward_to = [prometheus.remote_write.prom.receiver]
}

prometheus.remote_write "prom" {
  endpoint {
    url = "http://prometheus:9090/api/v1/write"
	headers = {
		"X-Scope-OrgID" = env("OTEL_SERVICE_NAMESPACE"),
	}
  }
}
